<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.assuse.koala</groupId>
    <artifactId>design-pattern</artifactId>
    <version>1.0.0</version>

    <packaging>jar</packaging>

    <name>koala</name>
    <description>设计模式</description>

    <!--统一版本管理-->
    <properties>
        <jdk.version>11</jdk.version>
        <koala.version>1.0.0</koala.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>

        <!--spring boot-->
        <spring-boot.version>2.7.5</spring-boot.version>

        <!--spring cloud-->
        <spring-cloud.version>2021.0.5</spring-cloud.version>
        <spring-cloud-alibaba.version>2021.1</spring-cloud-alibaba.version>

        <!--api doc-->
        <swagger.version>1.6.2</swagger.version>
        <knife4j.version>2.0.9</knife4j.version>

        <!-- db && orm -->
        <mysql.version>8.0.19</mysql.version>
        <druid.version>1.2.4</druid.version>
        <mybatis-plus.version>3.5.1</mybatis-plus.version>

        <!-- elastic stack -->
        <elasticsearch.version>7.14.0</elasticsearch.version>
        <logstash-logback-encoder.version>7.2</logstash-logback-encoder.version>

        <!-- tools -->
        <lombok.version>1.18.24</lombok.version>
        <hutool.version>5.8.9</hutool.version>
        <kaptcha.version>2.3.2</kaptcha.version>
        <jose-jwt.version>9.25.6</jose-jwt.version>
        <common.lang3.version>3.12.0</common.lang3.version>
        <commons-io.version>1.3.2</commons-io.version>
        <slf4j.version>2.0.0</slf4j.version>
        <jasypt.version>3.0.4</jasypt.version>

        <!-- distributed -->
        <redisson.version>3.16.8</redisson.version>
        <caffeine.version>3.1.0</caffeine.version>

        <!-- minio -->
        <minio.version>8.4.5</minio.version>
    </properties>

    <!--全局依赖配置-->
    <dependencies>
        <!--lombok-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
        </dependency>
        <!--hutool，它已包含commons lang3，二者二选一即可-->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <version>${hutool.version}</version>
        </dependency>
        <!--commons lang3-->
        <!--<dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${common.lang3.version}</version>
        </dependency>-->
        <!-- jasypt加密 -->
        <dependency>
            <groupId>com.github.ulisesbocchio</groupId>
            <artifactId>jasypt-spring-boot-starter</artifactId>
            <version>${jasypt.version}</version>
        </dependency>
        <!--去掉此依赖，解决springboot项目日志不打印问题-->
        <!--<dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>-->
        <!--SpringBoot元数据生成核心依赖(properties、yml等文件输入配置自动提示)-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <!-- optional=true,依赖不会传递，之后项目若使用该依赖，需要重新引入；optional=true 表示依赖会传递，之后项目不需要直接引用 -->
            <optional>false</optional>
        </dependency>
    </dependencies>

    <!--依赖管理：
        1. 只是声明依赖，不实现依赖; 锁定版本，子module使用时可以不用写groupId和version
        2. 更改依赖中版本也可以使用此种方式进行
    -->
    <dependencyManagement>
        <dependencies>
            <!--spring-boot-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--spring-cloud-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--spring-cloud-alibaba-->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring-cloud-alibaba.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- ELK -->
            <dependency>
                <groupId>net.logstash.logback</groupId>
                <artifactId>logstash-logback-encoder</artifactId>
                <version>${logstash-logback-encoder.version}</version>
            </dependency>
            <dependency>
                <groupId>org.elasticsearch.client</groupId>
                <artifactId>elasticsearch-rest-high-level-client</artifactId>
                <version>${elasticsearch.version}</version>
            </dependency>
            <dependency>
                <groupId>org.elasticsearch.client</groupId>
                <artifactId>elasticsearch-rest-client</artifactId>
                <version>${elasticsearch.version}</version>
            </dependency>
            <dependency>
                <groupId>org.elasticsearch</groupId>
                <artifactId>elasticsearch</artifactId>
                <version>${elasticsearch.version}</version>
            </dependency>
            <!--验证码-->
            <dependency>
                <groupId>com.github.penggle</groupId>
                <artifactId>kaptcha</artifactId>
                <version>${kaptcha.version}</version>
            </dependency>
            <!-- 分布式锁，二选一 -->
            <dependency>
                <groupId>org.redisson</groupId>
                <artifactId>redisson</artifactId>
                <version>${redisson.version}</version>
            </dependency>
            <!--<dependency>
                <groupId>org.redisson</groupId>
                <artifactId>redisson-spring-boot-starter</artifactId>
                <version>${redisson.version}</version>
            </dependency>-->
            <!--
            本地高速缓存引入，java8使用2.x版本，java11+使用3.x版本，caffeine一般与redis结合使用，
            caffeine作为一级缓存，redis作为二级缓存使用。
            -->
            <dependency>
                <groupId>com.github.ben-manes.caffeine</groupId>
                <artifactId>caffeine</artifactId>
                <version>${caffeine.version}</version>
            </dependency>
            <!--引入minio-->
            <dependency>
                <groupId>io.minio</groupId>
                <artifactId>minio</artifactId>
                <version>${minio.version}</version>
            </dependency>
            <!--mysql驱动-->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql.version}</version>
            </dependency>
            <!-- JWT库: spring-security-oauth2-jose 依赖中包含 nimbus-jose-jwt 库，二者可选其一-->
            <dependency>
                <groupId>com.nimbusds</groupId>
                <artifactId>nimbus-jose-jwt</artifactId>
                <version>${jose-jwt.version}</version>
            </dependency>
            <!--knife4j(集成swagger)-->
            <dependency>
                <groupId>com.github.xiaoymin</groupId>
                <artifactId>knife4j-spring-boot-starter</artifactId>
                <version>${knife4j.version}</version>
            </dependency>
            <dependency>
                <groupId>com.github.xiaoymin</groupId>
                <artifactId>knife4j-micro-spring-boot-starter</artifactId>
                <version>${knife4j.version}</version>
            </dependency>
            <dependency>
                <groupId>com.github.xiaoymin</groupId>
                <artifactId>knife4j-spring-ui</artifactId>
                <version>${knife4j.version}</version>
            </dependency>
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>${druid.version}</version>
            </dependency>
            <!--引入swagger cnnotations-->
            <dependency>
                <groupId>io.swagger</groupId>
                <artifactId>swagger-annotations</artifactId>
                <version>${swagger.version}</version>
            </dependency>
            <!--mybatis-plus-->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>${mybatis-plus.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-io</artifactId>
                <version>${commons-io.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!-- 使用分发管理将本项目打成jar包，直接上传到指定服务器 -->
    <distributionManagement>
        <!--正式版本-->
        <repository>
            <!-- nexus服务器中用户名：在settings.xml中<server>的id-->
            <id>nexus-releases</id>
            <!-- 这个名称自己定义 -->
            <name>Release repository</name>
            <url>http://192.168.1.105:8081/repository/maven-releases/</url>
        </repository>
        <!--快照-->
        <snapshotRepository>
            <id>nexus-snapshots</id>
            <name>Snapshots repository</name>
            <url>http://192.168.1.105/repository/maven-snapshots/</url>
        </snapshotRepository>
    </distributionManagement>

    <!--项目远程仓库设置-->
    <repositories>
        <repository>
            <!--远程仓库唯一标识符 -->
            <id>nexus22</id>
            <!--仓库描述-->
            <name>Nexus22</name>
            <!--远程仓库url地址-->
            <url>http://192.168.1.22:8081/repository/maven-public/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <!--表示禁止从此仓库快照版下载-->
                <enabled>false</enabled>
                <updatePolicy>always</updatePolicy>
            </snapshots>
        </repository>
        <repository>
            <id>aliyunmaven</id>
            <name>aliyun</name>
            <url>https://maven.aliyun.com/repository/public</url>
        </repository>
    </repositories>

    <!--插件仓库配置-->
    <pluginRepositories>
        <pluginRepository>
            <id>nexus</id>
            <name>Nexus</name>
            <url>
                http://192.168.156.25:8081/nexus/content/groups/public/
            </url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>

    <!-- 插件配置 -->
    <build>
        <pluginManagement>
            <plugins>
                <!-- compiler插件,设定JDK版本 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.0</version>
                    <configuration>
                        <source>${jdk.version}</source>
                        <target>${jdk.version}</target>
                        <showWarnings>true</showWarnings>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>
